<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.personal.oyl.event.EventMapper">
    <resultMap id="BaseResultMap" type="com.personal.oyl.event.Event">
        <result column="event_id" property="eventId" jdbcType="VARCHAR" />
        <result column="event_type" property="eventType" jdbcType="VARCHAR" />
        <result column="event_time" property="eventTime" jdbcType="TIMESTAMP" />
        <result column="context" property="context" jdbcType="VARCHAR" />
        <result column="route_key" property="routeKey" jdbcType="BIGINT" />
    </resultMap>


    <sql id="Base_Column_List">
        event_id, event_type, event_time, context, route_key
    </sql>

    <insert id="insert">
        insert into event_queue_${param1}(
            event_id,
            event_type,
            event_time,
            context,
            route_key
        ) values (
                     #{param2.eventId,jdbcType=VARCHAR},
                     #{param2.eventType,jdbcType=VARCHAR},
                     #{param2.eventTime,jdbcType=TIMESTAMP},
                     #{param2.context,jdbcType=VARCHAR},
                     #{param2.routeKey,jdbcType=BIGINT}
                 )
    </insert>

    <select id="queryTopN" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" />
        from event_queue_${param1}
        order by id
        limit #{param2}
    </select>

    <delete id="batchClean">
        delete from event_queue_${param1}
        where event_id in
        <foreach item="item" index="index" collection="param2" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <insert id="fail">
        insert into event_failed(
            event_id,
            subscriber_id,
            event_type,
            event_time,
            context,
            route_key,
            err_message
        ) values (
                     #{param2.eventId,jdbcType=VARCHAR},
                     #{param1,jdbcType=VARCHAR},
                     #{param2.eventType,jdbcType=VARCHAR},
                     #{param2.eventTime,jdbcType=TIMESTAMP},
                     #{param2.context,jdbcType=VARCHAR},
                     #{param2.routeKey,jdbcType=BIGINT},
                     #{param3,jdbcType=VARCHAR}
                 )
    </insert>

    <insert id="markProcessed">
        insert into event_processed(
            event_id,
            subscriber_id
        ) values (
                     #{param1,jdbcType=VARCHAR},
                     #{param2,jdbcType=VARCHAR}
                 )
    </insert>

    <select id="isDuplicated" resultType="boolean">
        select count(*)
        from event_processed
        where event_id = #{param1,jdbcType=VARCHAR} and subscriber_id = #{param2,jdbcType=VARCHAR}
    </select>

    <select id="numberOfFailed" resultType="INT">
        select count(*)
        from event_failed
        where subscriber_id = #{param1,jdbcType=VARCHAR} and route_key = #{param2,jdbcType=BIGINT} and event_type = #{param3,jdbcType=VARCHAR} and status = 0
            limit 1
    </select>

    <resultMap id="FailedEventResultMap" type="com.personal.oyl.event.FailedEvent">
        <result column="id" property="id" jdbcType="BIGINT" />
        <result column="subscriber_id" property="subscriberId" jdbcType="VARCHAR" />
        <result column="event_id" property="event.eventId" jdbcType="VARCHAR" />
        <result column="event_type" property="event.eventType" jdbcType="VARCHAR" />
        <result column="event_time" property="event.eventTime" jdbcType="TIMESTAMP" />
        <result column="context" property="event.context" jdbcType="VARCHAR" />
        <result column="route_key" property="event.routeKey" jdbcType="BIGINT" />
    </resultMap>

    <select id="queryFailedEvent" resultMap="FailedEventResultMap">
        select `id`, `subscriber_id`, `event_type`, `event_time`, `context`, `route_key`
        from event_failed
        where status = 0
        order by id asc
        limit #{param1}
    </select>

    <update id="markReprocessed">
        update event_failed
        set status = 1
        where id = #{param1}
    </update>
</mapper>